<template>
<div>
  <div class="layout-yh">
    <div style="height:35px">
      <Button v-if="disabled" type="primary" @click="disabled = !disabled">按标题查询</Button>
      <Button style="float:right" v-if="!disabled" type="primary" @click="fanhui">返回</Button>
      <Button v-if="!disabled" type="primary" @click="chaxun">查询</Button>
    </div>
    <Input class="kuang" v-if="!disabled" v-model="tiaojian" placeholder="请输入标题"></Input>

    <div class="title-block">
      我处理的
    </div>

    <Modal v-model="modal" title="确认处理" width="400" @on-ok="asyncOK">
      <Form :label-width="80">
        <Form-item label="处理详情">
          <Input v-model="doResult" type="textarea" :rows="6" placeholder="请输入处理详情" style="width:200px"></Input>
        </Form-item>
      </Form>
    </Modal>

    <Modal v-model="showBoard" title="隐患信息" width="1000">
      <p class="show">标题：{{eventRecord.title}}</p>
      <p class="show">开始时间:{{eventDate}}</p>
      <p class="show">隐患区域：{{area.name}}</p>
      <p class="show"><span class="item-show">上报人:{{submitUser.name}}</span><span class="item-show">电话:{{submitUser.tel}}</span></p>
      <p class="show"><span class="item-show">处理人:{{executeUser.name}}</span><span class="item-show">电话:{{executeUser.tel}}</span></p>
      <p class="show">隐患描述：{{eventRecord.discribe}}</p>
      <p class="show">处理结果:{{eventRecord.doResult}}</p>
      <!-- <div v-for="item in picList" :value="item.src">{{item.src}}</div> -->
      <div>
        <img style="width:80%;margin-left: 10%" v-for="item in picList" :src="item.src">
      </div>
      <div slot="footer">
        <Button v-if="showBut" @click="asyncOKe">确认查看</Button>

      </div>
    </Modal>

    <Modal v-model="modals" title="确认上报？" @on-ok="asyncOKshangbao">
      <p>确认上报隐患？</p>
    </Modal>


    <div style="margin:10px 0 40px 0;position: relative;">
      <Table border :columns="columns" :data="eventList" stripe></Table>
      <div class="fenye">
        <Page v-if="fenyedis1" size="small" :total="total" @on-change="changePage"></Page>
      </div>
    </div>

    <!-- =============================================================================
1、面板都用一个
2、面板不要确定取消
2、请求
    点开各事件操作中的回复面板，开始查请求，替换数据后显示消息框
3、消息样式



页数

 -->

    <Modal v-model="replyBoard" width="600" title="回复面板" style="position: relative">
      <div class="board-info">
        <span v-for="item in replyList" class="item-message">
         <div class="title-reply">
           {{item.repUserName}} - {{item.repTime}}
         </div>
         <div class="content-reply" v-html="item.repContext">

         </div>
        </span>
      </div>
      <textarea @keydown.enter.prevent="rep" id="repContext" name="name" rows="3" cols="80" v-model="repContext"></textarea>
      <Button v-if="repSub" @click="topClickReplySets">回复1</Button>
      <Button v-if="!repSub" @click="subClickReplySets">回复2</Button>
      <div slot="footer">
      </div>
    </Modal>
    <div style="height:35px;margin-top:50px">
      <Button v-if="disabled2" type="primary" @click="disabled2 = !disabled2">按标题查询</Button>
      <Button style="float:right" v-if="!disabled2" type="primary" @click="fanhui2">返回</Button>
      <Button v-if="!disabled2" type="primary" @click="chaxun2">查询</Button>
    </div>
    <Input class="kuang" v-if="!disabled2" v-model="tiaojian2" placeholder="请输入标题2"></Input>

    <div class="title-block">
      我上报的
    </div>
    <div style="margin:10px 0 40px 0;position: relative;">
      <Table border :columns="getOwncolumns" :data="getOwnSubList" stripe></Table>
      <div class="fenye">
        <Page v-if="fenyedis2" size="small" :total="total3" @on-change="changegetOwnPage"></Page>
      </div>
    </div>

  </div>
</div>
</template>

<style>
.title-block {
  padding: 10px 0px;
  border-bottom: 1px dotted rgb(218, 218, 218);
}

.board-info {
  min-height: 500px;
  max-height: 500px;
  overflow-y: scroll;
}

.item-message {
  padding: 10px;
  display: block;
  border-top: 1px dashed rgb(100, 150, 200);
}

.title-reply {
  font-weight: bold;
}

.content-reply {
  padding-left: 30px;
}

.layout-yh {
  width: 92%;
  height: auto;
  margin: 10px 4% 10px 4%;
}

.kuang {
  width: 150px;
  display: inline-block;
  margin: 10px 20px 0 0;
}

.fenye {
  position: absolute;
  right: 0;
  bottom: -40px;
  float: right;
}

.show {
  margin: 5px;
  width: 55%;
  display: flex;
}

.item-show {
  flex: 1
}
</style>


<script>
export default {
  created() {
    this.jinru();
  },

  props: ['userInfo'],
  data() {
    return {

      showBoard: false,
      modal: false,
      modals: false,
      replyBoard: false,
      replyList: [],
      repSub: true,
      showBut: true,

      doResult: '',
      area: {},
      submitUser: {},
      executeUser: {},
      eventRecord: {},
      picList: [],
      disabled: true,
      disabled2: true,
      page: 1,
      total: 100,
      total2: 100,
      total3: 100,
      total4: 100,
      fenyedis1: true,
      fenyedis2: true,
      tiaojian: '',
      tiaojian2: '',
      eventId: '',
      submitUserId: '',
      areId: '',
      process: '',
      eventDate: '',
      repContext: '',
      columns: [{
          title: '事件',
          key: 'title'
        },
        {
          title: '时间',
          key: 'startTime',
        }, {
          title: '最新回复时间',
          key: 'replyTime',
        },
        {
          title: '是否处理',
          key: 'process',
        }, {
          title: '是否有新的回复',
          key: 'isNewSubReply',
        },
        {
          title: '操作',
          key: 'action',
          width: 270,
          align: 'center',
          render: (h, params) => {
            return h('div', [
              h('Button', {
                props: {
                  type: 'text',
                  size: 'small'
                },
                style: {
                  margin: '3px 3px 3px 3px',
                },
                on: {
                  click: () => {
                    // this.show(params.index)
                    this.eventId = this.eventList[params.index].eveId;
                    this.submitUserId = this.eventList[params.index].submitUserId;
                    this.searchReply(params.index)
                    this.topClickReply()
                    this.eventList[params.index].isNewSubReply = "无新的回复"
                    //面板回复按钮是否为回复下级
                    this.repSub = true
                    this.replyBoard = true //放到请求then中

                  }
                }
              }, '回复面板'),
              h('Button', {
                props: {
                  type: 'text',
                  size: 'small'
                },
                style: {
                  margin: '3px 3px 3px 3px',
                },
                on: {
                  click: () => {
                    this.eventshow(params.index)
                    this.anumber = params.index
                  }
                }
              }, '详情'),
              h('Button', {
                props: {
                  type: 'text',
                  size: 'small'
                },
                style: {
                  margin: '3px 3px 3px 3px',
                },
                on: {
                  click: () => {
                    this.queren(params.index)
                    this.anumber = params.index
                  }
                }
              }, '确认处理'),
              h('Button', {
                props: {
                  type: 'text',
                  size: 'small'
                },
                style: {

                  margin: '3px 3px 3px 3px',
                },
                on: {
                  click: () => {
                    this.shangbao(params.index)
                    this.anumber = params.index
                  }
                }
              }, '上报'),
            ]);
          }
        }
      ],
      getOwncolumns: [{
          title: '事件',
          key: 'title'
        },
        {
          title: '时间',
          key: 'startTime',
        }, {
          title: '最新回复时间',
          key: 'replyTime',
        },
        {
          title: '是否处理',
          key: 'process',
        }, {
          title: '是否有新的回复',
          key: 'isNewTopReply',
        },
        {
          title: '操作',
          key: 'action',
          width: 200,
          align: 'center',
          render: (h, params) => {
            return h('div', [
              h('Button', {
                props: {
                  type: 'text',
                  size: 'small'
                },
                style: {
                  margin: '3px 30px 3px 0px',
                },
                on: {
                  click: () => {
                    // this.show(params.index)
                    ///////////////////////////////////////////////////
                    //面板回复按钮是否为回复下级
                    this.repSub = false
                    this.areId = this.getOwnSubList[params.index].areId
                    this.eventId = this.getOwnSubList[params.index].eveId;
                    this.searchReply(params.index)
                    this.subClickReply()
                    this.getOwnSubList[params.index].isNewTopReply = "无新的回复"
                    this.replyBoard = true //放到请求then中

                  }
                }
              }, '回复面板'),
              h('Button', {
                props: {
                  type: 'text',
                  size: 'small'
                },
                style: {
                  margin: '3px 3px 3px 3px',
                },
                on: {
                  click: () => {
                    this.getOwnshow(params.index)
                  }
                }
              }, '详情'),
            ]);
          }
        }
      ],
      getOwnSubList: [{
        title: '111',
        process: '1'

      }],
      eventList: [{
        title: '111',
        process: '1'

      }, {
        title: '事件2',
        process: '1'

      }, {
        title: '事件3',
        process: '1',
        isNewSubReply: '666'

      }]
    }
  },
  methods: {
    datestyle(time) {
      let YYYY = 2000 + time.year % 100;
      let MM = time.month + 1;
      let dd = time.date;
      let HH = time.hours;
      let mm = time.minutes;
      let ss = time.seconds;
      return YYYY + "/" + MM + "/" + dd + " " + HH + ":" + mm + ":" + ss
    },
    transformData(set) {
      for (var i = 0; i < set.length; i++) {
        if (set[i].process == 0) {
          set[i].process = '未查看'
        } else if (set[i].process == 1) {
          set[i].process = '已查看'
        } else if (set[i].process == 2) {
          set[i].process = '已处理'
        }
      }
      return set
    },
    //在前端插入回复
    appendRep() {
      var item = {}
      var time = new Date()
      item.repUserName = this.userInfo.name
      item.repTime =
        time.getFullYear() + '/' + time.getMonth() + '/' + time.getDate() +
        ' ' + time.getHours() + ':' + time.getMinutes() + ':' + time.getSeconds()
      item.repContext = this.repContext
      this.repContext = ""
      this.replyList.push(item)
      setTimeout(this.rollBottom, 30)
      // this.rollBottom()
    },
    rollBottom() {
      var board = document.getElementsByClassName('board-info')[0]
      board.scrollTop = board.scrollHeight
    },
    rep(event) {
      if (event.shiftKey) {
        this.repContext += "<br/>"
        return
      }

      if (this.repContext == "") {
        this.$Message.info('请输入文字')
        return
      }

      if (this.repSub) {
        this.topClickReplySets()
      } else {
        this.subClickReplySets()
      }
    },

    asyncOK() {
      this.$http.post(
          'http:/\/localhost:8099/SafeCDTU/workOfEvent/querenEvent', {
            executeUserId: this.userInfo.uId,
            eventId: this.eventId,
            doResult: this.doResult
          }, {
            emulateJSON: true
          }
        )
        .then(function(res) {
          if (res.data.state == true) {
            this.$Message.success(res.data.message)
            this.eventList[this.anumber].process = "已处理"
          } else {
            this.$Message.error(res.data.message)
          }

        })
        .catch(function(err) {
          this.$Message.error('系统连接失败!' + err)
        });
    },
    searchReply() {
      this.replyList = []
      this.$http.post(
          'http:/\/localhost:8099/SafeCDTU/workOfEvent/searchReply', {
            eveId: this.eventId
          }, {
            emulateJSON: true
          }
        )
        .then(function(res) {
          this.replyList = res.data.replyList
          for (var i = 0; i < res.data.replyList.length; i++) {
            this.replyList[i].repTime = this.datestyle(this.replyList[i].repTime)
          }
          this.rollBottom()
        })
        .catch(function(err) {
          this.$Message.error('系统连接失败!' + err)
        });
    },

    eventshow(index) {
      this.showBoard = true;
      this.showBut = true;
      this.eventDate = this.eventList[index].startTime;
      this.eventId = this.eventList[index].eveId;
      this.show();
    },
    getOwnshow(index) {
      this.showBoard = true;
      this.showBut = false;
      this.eventDate = this.getOwnSubList[index].startTime;
      this.eventId = this.getOwnSubList[index].eveId;
      this.show();
    },
    show() {
      this.$http.post(
          'http:/\/localhost:8099/SafeCDTU/workOfEvent/getOneEvent', {
            eveId: this.eventId
          }, {
            emulateJSON: true
          }
        )
        .then(function(res) {
          this.eventRecord = res.data.eventRecord
          this.picList = res.data.picList
          this.area = res.data.area
          this.submitUser = res.data.submitUser
          this.executeUser = res.data.executeUser
        })
        .catch(function(err) {
          this.$Message.error('系统连接失败!' + err)
        });
    },
    asyncOKe() {
      this.$http.post(
          'http:/\/localhost:8099/SafeCDTU/workOfEvent/seeEvent', {
            eventId: this.eventId
          }, {
            emulateJSON: true
          }
        )
        .then(function(res) {
          if (res.data.state == true) {
            this.$Message.success(res.data.message)
            this.showBoard = false
            this.eventList[this.anumber].process = "已查看"
          } else if (res.data.state = "ee") {
            this.showBoard = false
          }
        })
        .catch(function(err) {
          this.$Message.error('系统连接失败!' + err)
        });
    },
    asyncOKshangbao() {
      this.$http.post(
          'http:/\/localhost:8099/SafeCDTU/workOfEvent/passOnEvent', {
            uId: this.userInfo.uId,
            eventId: this.eventId,
            areId: this.areId,
            process: this.process
          }, {
            emulateJSON: true
          }
        )
        .then(function(res) {
          if (res.data.state == true) {
            this.$Message.success(res.data.message)
            this.eventList[this.anumber].splice(this.anumber, 1)
            this.modals = false
          } else {
            this.$Message.error(res.data.message)
          }
        })
        .catch(function(err) {
          this.$Message.error('系统连接失败!' + err)
        });
    },


    getEvent() {
      this.$http.post(
          'http:/\/localhost:8099/SafeCDTU/workOfEvent/getEvent', {
            page: this.page,
            uId: this.userInfo.uId
          }, {
            emulateJSON: true
          }
        )
        .then(function(res) {
          this.eventList = this.transformData(res.data.eventList)
          for (var i = 0; i < res.data.eventList.length; i++) {
            this.eventList[i].startTime = this.datestyle(this.eventList[i].startTime)
            this.eventList[i].replyTime = this.datestyle(this.eventList[i].replyTime)
            if (this.eventList[i].isNewSubReply == 1) {
              this.eventList[i].isNewSubReply = '有新的回复'
            } else if (this.eventList[i].isNewSubReply == 0) {
              this.eventList[i].isNewSubReply = '无新的回复'
            };
          }
          this.total = res.data.total
        })
        .catch(function(err) {
          this.$Message.error('系统连接失败!' + err)
        });
    },

    getOwnEvent() {
      this.$http.post(
          'http:/\/localhost:8099/SafeCDTU/workOfEvent/getOwnSubEvent', {
            page: this.page,
            uId: this.userInfo.uId
          }, {
            emulateJSON: true
          }
        )
        .then(function(res) {

          this.getOwnSubList = this.transformData(res.data.eventRecordList)

          for (var i = 0; i < res.data.eventRecordList.length; i++) {

            this.getOwnSubList[i].startTime = this.datestyle(this.getOwnSubList[i].startTime)
            this.getOwnSubList[i].replyTime = this.datestyle(this.getOwnSubList[i].replyTime)
            //////////////////////

            if (this.getOwnSubList[i].isNewTopReply == 1) {
              this.getOwnSubList[i].isNewTopReply = '有新的回复'
            } else if (this.getOwnSubList[i].isNewTopReply == 0) {
              this.getOwnSubList[i].isNewTopReply = '无新的回复'
            }
          }
          this.total3 = res.data.total
        })
        .catch(function(err) {
          this.$Message.error('系统连接失败!' + err)
        });
    },
    jinru() {

      this.getEvent();
      this.getOwnEvent();
    },

    queren(index) {
      this.modal = true
      this.eventId = this.eventList[index].eveId
    },

    shangbao(index) {
      this.modals = true;
      this.eventId = this.eventList[index].eveId;
      this.areId = this.eventList[index].parAreaId;
      this.process = this.eventList[index].process;

    },

    topClickReplySets() {
      this.repToSubUser()
    },
    subClickReplySets() {
      this.repToTopUser()
    },

    topClickReply() {
      this.$http.post(
          'http:/\/localhost:8099/SafeCDTU/workOfEvent/topClickReply', {
            eveId: this.eventId,

          }, {
            emulateJSON: true
          }
        )
        .then(function(res) {

        })
        .catch(function(err) {
          this.$Message.error('系统连接失败!' + err)
        });
    },
    subClickReply() {
      this.$http.post(
          'http:/\/localhost:8099/SafeCDTU/workOfEvent/subClickReply', {
            eveId: this.eventId,
          }, {
            emulateJSON: true
          }
        )
        .then(function(res) {

        })
        .catch(function(err) {
          this.$Message.error('系统连接失败!' + err)
        });
    },
    repToTopUser() {
      this.$http.post(
          'http:/\/localhost:8099/SafeCDTU/workOfEvent/repToTopUser', {
            eveId: this.eventId,
            repContext: this.repContext,
            name: this.userInfo.name,
            areId: this.areId
          }, {
            emulateJSON: true
          }
        )
        .then(function(res) {
          if (res.data.state == true) {
            this.$Message.success(res.data.message)
            this.appendRep()
            document.getElementById('repContext').focus()
            this.repContext = ''
          } else {
            this.$Message.error(res.data.message)
          }
        })
        .catch(function(err) {
          this.$Message.error('系统连接失败!' + err)
        });
    },
    repToSubUser() {
      this.$http.post(
          'http:/\/localhost:8099/SafeCDTU/workOfEvent/repToSubUser', {
            eveId: this.eventId,
            repContext: this.repContext,
            submitUserId: this.submitUserId,
            name: this.userInfo.name,
          }, {
            emulateJSON: true
          }
        )
        .then(function(res) {
          if (res.data.state == true) {
            this.$Message.success(res.data.message)
            this.appendRep()
            document.getElementById('repContext').focus()
            this.repContext = ''
          } else {
            this.$Message.error(res.data.message)
          }
        })
        .catch(function(err) {
          this.$Message.error('系统连接失败!' + err)
        });
    },
    fanhui() {
      this.disabled = !this.disabled;
      this.fenyedis1 = true;
      this.getEvent()
    },

    chaxun() {
      this.$http.post(
          'http:/\/localhost:8099/SafeCDTU/workOfEvent/searchForUser', {
            condition: this.tiaojian,
            uId: this.userInfo.uId
          }, {
            emulateJSON: true
          }
        )
        .then(function(res) {
          this.eventList = this.transformData(res.data.eventList)
          for (var i = 0; i < res.data.eventList.length; i++) {
            this.eventList[i].startTime = this.datestyle(this.eventList[i].startTime)
            this.eventList[i].replyTime = this.datestyle(this.eventList[i].replyTime)
            if (this.eventList[i].isNewSubReply == 1) {
              this.eventList[i].isNewSubReply = '有新的回复'
            } else if (this.eventList[i].isNewSubReply == 0) {
              this.eventList[i].isNewSubReply = '无新的回复'
            };
          }
          this.total2 = res.data.total
          alert(this.total2)
          this.fenyedis1 = false
        })
        .catch(function(err) {
          this.$Message.error('系统连接失败!' + err)
        });

    },
    fanhui2() {
      this.disabled2 = !this.disabled2;
      this.fenyedis2 = true;
      this.getOwnEvent()
    },

    chaxun2() {
      this.$http.post(
          'http:/\/localhost:8099/SafeCDTU/workOfEvent/searchOwnSubEvent', {
            condition: this.tiaojian2,
            uId: this.userInfo.uId
          }, {
            emulateJSON: true
          }
        )
        .then(function(res) {
          this.getOwnSubList = this.transformData(res.data.eventList)
          for (var i = 0; i < res.data.eventList.length; i++) {
            this.getOwnSubList[i].startTime = this.datestyle(this.getOwnSubList[i].startTime)
            this.getOwnSubList[i].replyTime = this.datestyle(this.getOwnSubList[i].replyTime)
            if (this.getOwnSubList[i].isNewTopReply == 1) {
              this.getOwnSubList[i].isNewTopReply = '有新的回复'
            } else if (this.getOwnSubList[i].isNewTopReply == 0) {
              this.getOwnSubList[i].isNewTopReply = '无新的回复'
            };
          }
          this.total4 = res.data.total
          this.fenyedis2 = false
        })
        .catch(function(err) {
          this.$Message.error('系统连接失败!' + err)
        });

    },

    changePage(page) {
      this.page = page;
      this.getEvent();
    },

    changegetOwnPage(page) {
      this.page = page;
      this.getOwnEvent();
    },

  },
}
</script>
