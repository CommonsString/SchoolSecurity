<template>
<div class="layout-aq">
  <!--信息模块  -->
  <Card class="aqxinxi">
    <p slot="title">信息</p>
    <div slot="extra" class="block-buttons">

      <!--信息栏中的按钮  -->
      <Button v-if="disabled" type="primary" @click="disabled = !disabled;">编辑信息</Button>
      <Button v-if="!disabled" type="primary" @click="success">保存</Button>
      <Button v-if="!disabled" type="primary" @click="quxiao">取消</Button>
      <Button type="primary" @click="modalp = true">修改密码</Button>

      <!--修改密码对话框  -->
      <Modal v-model="modalp" title="修改密码" width="400" @on-ok="asyncOKp">
        <Form ref="formCustom" :model="formCustom" :rules="ruleCustom" :label-width="80">
          <Form-item label="密码" prop="passwd">
            <Input type="password" v-model="formCustom.passwd" @blur="check" placeholder="请输入密码" style="width:200px"></Input>
          </Form-item>
          <Form-item label="确认密码" prop="passwdCheck">
            <Input type="password" v-model="formCustom.passwdCheck" placeholder="再次输入密码" style="width:200px"></Input>
          </Form-item>
        </Form>
      </Modal>

      <!--查看隐患信息对话框  -->
      <Modal v-model="modale" title="隐患信息" width="1000">
        <p class="show">标题：{{eventRecord.title}}</p>
        <p class="show">开始时间:{{eventDate}}</p>
        <p class="show">隐患区域：{{area.name}}</p>
        <p class="show"><span class="item-show">上报人:{{submitUser.name}}</span><span class="item-show">电话:{{submitUser.tel}}</span></p>
        <p class="show"><span class="item-show">处理人:{{executeUser.name}}</span><span class="item-show">电话:{{executeUser.tel}}</span></p>
        <p class="show">隐患描述：{{eventRecord.discribe}}</p>
        <p class="show">处理结果:{{eventRecord.doResult}}</p>
        <div>
          <img style="width:80%;margin-left: 10%" v-for="item in picList" :src="item.src">
        </div>
        <div slot="footer">
          <Button v-if="showBut" @click="asyncOKe">确认查看</Button>
        </div>
      </Modal>
    </div>

    <!--信息中用户的信息   通过编辑按钮控制修改  -->
    <Input class="xinxi" v-model="name" :disabled="disabled">
    <span slot="prepend"><Icon type="person"></Icon> </span><span slot="prepend"> 姓名</span>
    </Input>
    <Input class="xinxi" v-model="tel" :disabled="disabled">
    <span slot="prepend"><Icon type="ios-telephone"></Icon> </span><span slot="prepend"> 电话</span>
    </Input>
    <Input class="xinxi" v-model="email" :disabled="disabled">
    <span slot="prepend"><Icon type="email"></Icon> </span><span slot="prepend"> 邮箱</span>
    </Input>
    <div v-if="showdep">
      <Input class="xinxi" v-model="depname" disabled="false">
      <span slot="prepend"><Icon type="card"></Icon> </span><span slot="prepend"> 部门</span>
      </Input>
    </div>
    <!--所有部门列表  无部门用户编辑信息时出现  可供选择部门  -->
    <div v-if="cshowdep">
      <Select class="xinxi" v-model="depId" :disabled="disabled" :placeholder="depname">
        <Option v-for="item in depList" :value="item.depId" :key="item.depId">{{ item.name }}</Option>
    </Select>
    </div>
    <div class="clear"></div>
  </Card>

  <!--隐患信息模块  -->
  <Card id="aqyinhuan">
    <p slot="title">最新隐患信息</p>
    <a slot="extra" href="/eventList">更多</a>
    <Table border :columns="columns" :data="eventList" stripe></Table>
  </Card>
  <!--安全公告模块  -->
  <Card id="aqgonggao">
    <p slot="title">最新部门通知 </p>
    <a slot="extra" href="/noticeListDep">更多</a>
    <Table border :columns="columns2" :data="contextList" stripe></Table>
  </Card>
  <Modal v-model="modals" title="确认上报？" @on-ok="asyncOKshangbao">
    <p>确认上报隐患？</p>
  </Modal>

  <Modal v-model="replyBoard" width="600" title="回复面板" style="position: relative">
    <div class="board-info">
      <span v-for="item in replyList" class="item-message">
         <div class="title-reply">
           {{item.repUserName}} - {{item.repTime}}
         </div>
         <div class="content-reply" v-html="item.repContext">

         </div>
        </span>
    </div>
    <textarea @keydown.enter.prevent="rep" id="repContext" name="name" rows="3" cols="80" v-model="repContext"></textarea>
    <Button @click="topClickReplySets">回复</Button>
    <div slot="footer">
    </div>
  </Modal>

  <Modal v-model="modal" title="确认处理" width="400" @on-ok="asyncOK">
    <Form :label-width="80">
      <Form-item label="处理详情">
        <Input v-model="doResult" type="textarea" :rows="6" placeholder="请输入处理详情" style="width:200px"></Input>
      </Form-item>
    </Form>
  </Modal>

</div>
</template>

<script>
export default {
  name: "workSpace",
  created() {
    this.jinru();
    // 进入时执行函数 加载出对应模块得到数据
  },

  props: ['userInfo', 'eventList', 'contextList'],
  data() {
    // 对修改密码时输入的密码的验证
    const validatePass = (rule, value, callback) => {
      if (value === '') {
        callback(new Error('请输入密码'));
      } else {
        if (this.formCustom.passwdCheck !== '') {
          // 对第二个密码框单独验证
          this.$refs.formCustom.validateField('passwdCheck');
        }
        callback();
      }
    };
    const long = (rule, value, callback) => {
      if (value.length < 8) {
        callback(new Error('密码长度应该大于八位'));
      } else {
        callback();
      }
    };
    const validatePassCheck = (rule, value, callback) => {
      if (value === '') {
        callback(new Error('请再次输入密码'));
      } else if (value !== this.formCustom.passwd) {
        callback(new Error('两次输入密码不一致!'));
      } else if (value.length < 8) {
        callback(new Error('密码长度应该大于八位'));
      } else {
        callback();
      }
    };

    return {
      modale: false,
      modalp: false,
      modals: false,
      modal: false,
      replyBoard: false,
      replyList: [],

      name: '',
      tel: '',
      depId: '',
      email: '',
      depname: '',
      disabled: true,
      cshowdep: false,
      showdep: false,
      eventId: '',
      eventDate: '',
      submitUserId: '',
      area: {},
      submitUser: {},
      executeUser: {},
      eventRecord: {},
      eventList: [],
      picList: [],
      columns: [{
          title: '标题',
          key: 'title'
        },
        {
          title: '时间',
          key: 'startTime',
        },
        {
          title: '操作',
          key: 'action',
          align: 'center',
          render: (h, params) => {
            return h('div', [
              h('Button', {
                props: {
                  type: 'text',
                  size: 'small'
                },
                style: {
                  margin: '0 0 0 0',
                },
                on: {
                  click: () => {
                    // this.show(params.index)
                    this.eventId = this.eventList[params.index].eveId;
                    this.submitUserId = this.eventList[params.index].submitUserId;
                    this.searchReply(params.index)
                    this.topClickReply()
                    this.eventList[params.index].isNewSubReply = "无新的回复"
                    //面板回复按钮是否为回复下级

                    this.replyBoard = true //放到请求then中

                  }
                }
              }, '回复'),
              h('Button', {
                props: {
                  type: 'text',
                  size: 'small'
                },
                style: {
                  margin: '0 0 0 0',
                },
                on: {
                  click: () => {
                    this.show(params.index)
                    this.anumber = params.index
                  }
                }
              }, '详情'),
              h('Button', {
                props: {
                  type: 'text',
                  size: 'small'
                },
                style: {
                  margin: '0 0 0 0',

                },
                on: {
                  click: () => {
                    this.queren(params.index)
                    this.anumber = params.index
                  }
                }
              }, '处理'),
              h('Button', {
                props: {
                  type: 'text',
                  size: 'small'
                },
                style: {

                  margin: '0 0 0 0',
                },
                on: {
                  click: () => {
                    this.shangbao(params.index)
                    this.anumber = params.index
                  }
                }
              }, '上报'),
            ]);
          }
        }
      ],
      columns2: [{
          title: '标题',
          key: 'title'
        },
        {
          title: '时间',
          key: 'time',
        },
        {
          title: '操作',
          key: 'action',
          align: 'center',
          render: (h, params) => {
            return h('div', [
              h('Button', {
                props: {
                  type: 'text',
                  size: 'small'
                },
                on: {
                  click: () => {
                    this.show2(params.index)
                    // 调用方法  查看信息
                  }
                }
              }, '查看'),
            ]);
          }
        }
      ],
      formCustom: {
        passwd: '',
        passwdCheck: '',
      },
      ruleCustom: {
        passwd: [{
          validator: validatePass,
          trigger: 'blur'
        }, {
          validator: long,
          trigger: 'blur'
        }],
        passwdCheck: [{
          validator: validatePassCheck,
          trigger: 'blur'
        }],
      },
      depList: [],
    }
  },
  methods: {

    topClickReplySets() {
      this.repToSubUser()
    },
    repToSubUser() {
      this.$http.post(
          'api/workOfEvent/repToSubUser', {
            eveId: this.eventId,
            repContext: this.repContext,
            submitUserId: this.submitUserId,
            name: this.userInfo.name,
          }, {
            emulateJSON: true
          }
        )
        .then(function(res) {
          if (res.data.state == true) {
            this.$Message.success(res.data.message)
            this.appendRep()
            document.getElementById('repContext').focus()
            this.repContext = ''
          } else {
            this.$Message.error(res.data.message)
          }
        })
        .catch(function(err) {
          this.$Message.error('系统连接失败!' + err)
        });
    },
    rep(event) {
      if (event.shiftKey) {
        this.repContext += "<br/>"
        return
      }

      if (this.repContext == "") {
        this.$Message.info('请输入文字')
        return
      }
      this.topClickReplySets();

      // 判断上下级
    },
    appendRep() {
      var item = {}
      var time = new Date()
      item.repUserName = this.userInfo.name
      item.repTime =
        time.getFullYear() + '/' + time.getMonth() + '/' + time.getDate() +
        ' ' + time.getHours() + ':' + time.getMinutes() + ':' + time.getSeconds()
      item.repContext = this.repContext
      this.repContext = ""
      this.replyList.push(item)
      setTimeout(this.rollBottom, 30)
      // this.rollBottom()
    },
    rollBottom() {
      var board = document.getElementsByClassName('board-info')[0]
      board.scrollTop = board.scrollHeight
    },
    searchReply() {
      this.replyList = []
      this.$http.post(
          'api/workOfEvent/searchReply', {
            eveId: this.eventId
          }, {
            emulateJSON: true
          }
        )
        .then(function(res) {
          this.replyList = res.data.replyList
          for (var i = 0; i < res.data.replyList.length; i++) {
            this.replyList[i].repTime = this.datestyle(this.replyList[i].repTime)
          }
          this.rollBottom()
        })
        .catch(function(err) {
          this.$Message.error('系统连接失败!' + err)
        });
    },

    // 向后端请求需要查看的隐患的对应数据
    show(index) {
      this.modale = true;
      this.eventDate = this.eventList[index].startTime;
      this.eventId = this.eventList[index].eveId;
      this.$http.post(
          'api/workOfEvent/getOneEvent', {
            eveId: this.eventId
          }, {
            emulateJSON: true
          }
        )
        .then(function(res) {
          this.eventRecord = res.data.eventRecord
          this.picList = res.data.picList
          this.area = res.data.area
          this.submitUser = res.data.submitUser
          this.executeUser = res.data.executeUser
        })
        .catch(function(err) {
          this.$Message.error('系统连接失败!' + err)
        });
    },

    // 向后端请求需要查看的安全公告的对应数据
    show2(index) {
      this.$Modal.info({
        title: '隐患信息',
        width: '1000',
        content: `
        标题：${this.contextList[index].title}<br>
        发布时间：${this.contextList[index].time}<br>
        内容：${this.contextList[index].content}<br>
        `
      })
    },



    topClickReply() {
      this.$http.post(
          'api/workOfEvent/topClickReply', {
            eveId: this.eventId,

          }, {
            emulateJSON: true
          }
        )
        .then(function(res) {

        })
        .catch(function(err) {
          this.$Message.error('系统连接失败!' + err)
        });
    },

    asyncOK() {
      this.$http.post(
          'api/workOfEvent/querenEvent', {
            executeUserId: this.userInfo.uId,
            eventId: this.eventId,
            doResult: this.doResult
          }, {
            emulateJSON: true
          }
        )
        .then(function(res) {
          if (res.data.state == true) {
            this.$Message.success(res.data.message)
            this.eventList[this.anumber].process = "已处理"
          } else {
            this.$Message.error(res.data.message)
          }

        })
        .catch(function(err) {
          this.$Message.error('系统连接失败!' + err)
        });
    },

    shangbao(index) {
      this.modals = true;
      this.eventId = this.eventList[index].eveId;
      this.areId = this.eventList[index].parAreaId;
      this.process = this.eventList[index].process;

    },

    asyncOKshangbao() {
      this.$http.post(
          'api/workOfEvent/passOnEvent', {
            uId: this.userInfo.uId,
            eventId: this.eventId,
            areId: this.areId,
            process: this.process
          }, {
            emulateJSON: true
          }
        )
        .then(function(res) {

          if (res.data.state == true) {
            this.$Message.success(res.data.message)
            // this.eventList[this.anumber].splice(this.anumber, 1)
            this.eventList.splice(this.anumber, 1)
            this.modals = false
          } else {
            this.$Message.error(res.data.message)
          }
        })
        .catch(function(err) {
          //  TODO--
          // this.$Message.error('系统连接失败!' + err)

        });
    },

    queren(index) {
      this.modal = true
      this.eventId = this.eventList[index].eveId
    },

    // 编辑信息点击保存后   向后端发送编辑的信息的内容  后端返回是否编辑成功
    success() {
      this.$http.post(
          'api/infoSearchAndFix/alterBasicInfo', {
            uId: this.userInfo.uId,
            name: this.name,
            tel: this.tel,
            email: this.email,
            depId: this.depId
          }, {
            emulateJSON: true
          }
        )
        .then(function(res) {
          if (res.data.state == true) {
            this.$Message.success(res.data.message)
            this.disabled = true;
            this.cshowdep = false;
            this.jinru(); //若成功   刷新该页面信息
          } else {
            this.$Message.error(res.data.message)
          }
        })
        .catch(function(err) {
          this.$Message.error('系统连接失败!' + err)
        });
    },

    // 编辑信息时   取消编辑   点击返回按钮   重新获取该页面数据
    quxiao() {
      this.disabled = true;
      this.jinru();
    },

    // 修改密码后   点击提交按钮  向服务器发送修改后的密码   返回是否修改成功
    asyncOKp() {
      this.$http.post(
          'api/infoSearchAndFix/changePassword', {
            uId: this.userInfo.uId,
            password: this.formCustom.passwd
          }, {
            emulateJSON: true
          }
        )
        .then(function(res) {
          if (res.data.state == true) {
            this.$Message.success(res.data.message)
            this.modalp = false
          } else {
            this.$Message.error(res.data.message)
          }
        })
        .catch(function(err) {
          this.$Message.error('系统连接失败!' + err)
        });
    },

    // 查看隐患后  向服务器发送已查看的消息   返回是否查看成功
    asyncOKe() {
      this.$http.post(
          'api/workOfEvent/seeEvent', {
            eventId: this.eventId
          }, {
            emulateJSON: true
          }
        )
        .then(function(res) {
          if (res.data.state == true) {
            this.$Message.success(res.data.message)
            this.modale = false
          } else if (res.data.state = "ee") {
            this.modale = false
          }
        })
        .catch(function(err) {
          this.$Message.error('系统连接失败!' + err)
        });
    },

    // 获取该用户对应的部门列表
    getAllDep() {
      this.$http.post(
          'api/infoSearchAndFix/getAllDep', {
            uId: this.userInfo.uId
          }, {
            emulateJSON: true
          }
        )
        .then(function(res) {
          this.depList = res.data.depList
        })
        .catch(function(err) {
          this.$Message.error('系统连接失败!' + err)
        });
    },

    // 进入时调用的方法
    jinru() {
      this.$http.post(
          'api/infoSearchAndFix/getOwnInfo', {
            uId: this.userInfo.uId
          }, {
            emulateJSON: true
          }
        )
        .then(function(res) {
          this.name = res.data.user.name
          this.tel = res.data.user.tel
          this.email = res.data.user.email
          this.depId = res.data.user.depId

          // 判断现在登录的用户是否有部门
          // 无部门   载入部门列表
          // 有部门显示所在的部门
          if ((this.depId == '') || (this.depId == null)) {
            this.depname = '请选择部门'
            this.getAllDep();
            this.cshowdep = true
          } else {
            this.depname = res.data.department.name
            this.showdep = true;
          }
        })
        .catch(function(err) {
          this.$Message.error('系统连接失败!jinru' + err)
        });
    }
  }
}
</script>


<style scoped>
.layout-aq {
  width: 100%;
  height: auto;
}

.block-buttons {
  width: 300px;
}

.block-buttons * {
  float: right;
}

.board-info {
  min-height: 500px;
  max-height: 500px;
  overflow-y: scroll;
}

button {
  margin: 0 2% 0 0;
  background-color: darkgrey;
  border: 1px solid darkgrey;
}

.aqxinxi {
  width: auto;
  height: auto;
  margin: 10px 4% 10px 4%;
}

.xinxi {
  margin: 2% 0 2% 2%;
  width: 200px;
  float: left;
}

.clear {
  clear: both;
}

#aqyinhuan {
  width: 44%;
  height: 50%;
  margin: 5px 2% 10px 4%;
  float: left;
  overflow: auto;
  min-height: 370px;
}

#aqgonggao {
  width: 44%;
  height: 50%;
  margin: 5px 4% 10px 2%;
  float: right;
  overflow: auto;
  min-height: 370px;
}

.show {
  margin: 5px;
  width: 55%;
  display: flex;
}

.item-show {
  flex: 1
}
</style>
